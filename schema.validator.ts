/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv = require('ajv');
import Schema from './schema';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export {Schema};
export const SchemaSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "defaultProperties": [
  ],
  "definitions": {
    "AnyOperation": {
      "defaultProperties": [
      ],
      "properties": {
        "arguments": {
        },
        "name": {
        },
        "object": {
        }
      },
      "required": [
        "arguments",
        "name",
        "object"
      ],
      "type": "object"
    },
    "TestRunnerOperations.FailPoint": {
      "defaultProperties": [
      ],
      "properties": {
        "arguments": {
          "defaultProperties": [
          ],
          "properties": {
            "client": {
              "type": "string"
            },
            "configureFailPoint": {
              "type": "string"
            },
            "data": {
              "defaultProperties": [
              ],
              "properties": {
                "appName": {
                  "type": "string"
                },
                "blockConnection": {
                  "type": "boolean"
                },
                "blockTimeMS": {
                  "type": "number"
                },
                "failCommands": {
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                }
              },
              "required": [
                "appName",
                "blockConnection",
                "blockTimeMS",
                "failCommands"
              ],
              "type": "object"
            }
          },
          "required": [
            "client",
            "configureFailPoint",
            "data"
          ],
          "type": "object"
        },
        "name": {
          "enum": [
            "failPoint"
          ],
          "type": "string"
        },
        "object": {
          "enum": [
            "testRunner"
          ],
          "type": "string"
        }
      },
      "required": [
        "arguments",
        "name",
        "object"
      ],
      "type": "object"
    }
  },
  "properties": {
    "operations": {
      "items": {
        "anyOf": [
          {
            "$ref": "#/definitions/TestRunnerOperations.FailPoint"
          },
          {
            "$ref": "#/definitions/AnyOperation"
          }
        ]
      },
      "type": "array"
    }
  },
  "required": [
    "operations"
  ],
  "type": "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
export const isSchema = ajv.compile(SchemaSchema) as ValidateFunction<Schema>;
export default function validate(value: unknown): Schema {
  if (isSchema(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isSchema.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'Schema'}) +
      '\n\n' +
      inspect(value),
    );
  }
}
